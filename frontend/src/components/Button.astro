---
interface Props {
    flexConfig: {
        enable: boolean
        justify?: 'center' | 'flex-start' | 'flex-end' | 'space-between' | 'space-around' | 'space-evenly'
        align?: 'center' | 'flex-start' | 'flex-end' | 'stretch' | 'baseline'
        gap: string
    }
    buttonStyle: {
        width: 'auto' | 'full'
        variant: 'primary' | 'secondary' | 'tertiary'
        size: 'small' | 'medium' | 'large'
        border: boolean
        borderRadius: 'none' | 'small' | 'medium' | 'large'
        disabled: boolean
    }
    dataAos?: string,
    dataAosDelay?: string,
    href?: string
    openInNewTab?: boolean
    onClick?: (event: MouseEvent) => void
    id?: string
}
const { buttonStyle, flexConfig, href, dataAos, dataAosDelay, openInNewTab, id } = Astro.props;

// Generate a unique ID if none is provided
const buttonId = id || `button-${Math.random().toString(36).substring(2, 11)}`;

let buttonStyles = `
display: ${flexConfig.enable ? 'flex' : 'block'}; justify-content: ${flexConfig.justify || 'center'}; align-items: ${flexConfig.align || 'center'}; gap: ${flexConfig.gap || '16px'};
width: ${buttonStyle.width === 'full' ? '100%' : 'auto'}; padding: ${buttonStyle.size === 'small' ? '8px 16px' : buttonStyle.size === 'medium' ? '12px 24px' : '16px 32px'}; border-radius: ${buttonStyle.borderRadius === 'small' ? '4px' : buttonStyle.borderRadius === 'medium' ? '8px' : buttonStyle.borderRadius === 'large' ? '16px' : '0'};
background-color: ${buttonStyle.variant === 'primary' ? 'var(--primary)' : buttonStyle.variant === 'secondary' ? 'var(--foreground)' : 'var(--background)'};
border: ${buttonStyle.border ? '2px solid var(--border)' : 'none'};
cursor: pointer;
color: var(--copy-light);
`
---

<button 
  id={buttonId}
  style={buttonStyles} 
  class="button" 
  disabled={buttonStyle.disabled} 
  data-aos={dataAos} 
  data-aos-delay={dataAosDelay}
  data-href={href}
  data-open-new-tab={openInNewTab ? "true" : "false"}
  data-variant={buttonStyle.variant}
>
  <slot />
</button>

<script define:vars={{ buttonId }}>
  // Find the specific button by its ID
  const button = document.getElementById(buttonId);
  
  if (button) {
    const href = button.dataset.href;
    const openInNewTab = button.dataset.openNewTab === "true";
    const variant = button.dataset.variant;
    
    if (href) {
      button.addEventListener('click', () => {
        if (openInNewTab) {
          window.open(href, '_blank');
        } else {
          window.location.href = href;
        }
      });
    }
    
    // Add hover effects based on the button's variant
    button.addEventListener('mouseover', () => {
      button.style.transition = 'background-color 0.3s ease';
      
      // Apply appropriate hover color based on the variant
      if (variant === 'primary') {
        button.style.backgroundColor = 'var(--primary-dark)';
      } else if (variant === 'secondary') {
        button.style.backgroundColor = 'var(--foreground-dark, #1a1a1a)';
      } else if (variant === 'tertiary') {
        button.style.backgroundColor = 'var(--background-dark, #f0f0f0)';
      }
    });
    
    button.addEventListener('mouseout', () => {
      // Restore original color based on the variant
      if (variant === 'primary') {
        button.style.backgroundColor = 'var(--primary)';
      } else if (variant === 'secondary') {
        button.style.backgroundColor = 'var(--foreground)';
      } else if (variant === 'tertiary') {
        button.style.backgroundColor = 'var(--background)';
      }
    });
  }
</script>