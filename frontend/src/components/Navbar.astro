---
interface Props {
  navbarElements: {
    links: string[]
  };
}


import developerArrow from "../assets/icons/developer-arrow.svg?url"
import { loadTranslations } from "../i18n";
import { getLocale } from "astro-i18n-aut";
import { generateUrl, removeAccents } from "../utils/utils";
const locale = getLocale(Astro.url);
const translations = await loadTranslations(locale);

let { navbarElements } = Astro.props;
---

<nav class="navbar">
  <div class="navbar__logo">
    <button id="navbar__three__bars">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="#fbfbfb" d="M3.75 5.25a.75.75 0 0 0 0 1.5h16.5a.75.75 0 0 0 0-1.5zm0 6a.75.75 0 0 0 0 1.5h16.5a.75.75 0 0 0 0-1.5zm0 6a.75.75 0 0 0 0 1.5h16.5a.75.75 0 0 0 0-1.5z"/></svg>
    </button>
    <a href="/" id="navbar__logo__link">
      <img src={developerArrow} alt="Developer Arrow" />
      <span class="navbar__logo__author">Cristi√°n, F. S. Developer</span>
    </a>
  </div>
  <div class="navbar__links">
    {
      navbarElements.links.map((link) => {
        return <a href={`#${removeAccents(translations.navbar[link].toLowerCase())}`}>{translations.navbar[link]}</a>;
      })
    }
  </div>
  <div class="navbar__language__input">
    <select id="language-select">
      <option value="es">{translations.navbar["languageInput"].options["es"]}</option>
      <option value="en" selected={locale === "en" ? true : false}>{translations.navbar["languageInput"].options["en"]}</option>
    </select>
  </div>
  <div class="navbar__links__mobile">
    {
      navbarElements.links.map((link) => {
        return <a href={generateUrl(locale, link)}>{link}</a>;
      })
    }
  </div>
</nav>

<style>
  @import url("https://fonts.googleapis.com/css2?family=Nothing+You+Could+Do&display=swap");
  
  #navbar__three__bars {
    display: none;
    background: none;
    border: none;
    cursor: pointer;
    padding: 0;
  }

  .navbar__links__mobile {
    display: none;
    flex-direction: column;
    gap: 12px;
    position: fixed;
    top: 90px;
    left: 20px;
    right: 20px;
    z-index: 1000;
    padding: 12px;
    background-color: #26212c;
    border-radius: 12px;
    opacity: 0;
    transform: translateY(-20px);
    transition: opacity 0.3s ease, transform 0.3s ease;
  }

  .navbar__links__mobile.active {
    display: flex;
    opacity: 1;
    transform: translateY(0);
  }

  .navbar__links__mobile a {
    border-radius: 12px;
    padding: 14px;
    transition: background-color 0.2s ease;
  }

  .navbar__links__mobile a:hover {
    background-color: rgba(255, 255, 255, 0.1);
  }

  .navbar {
    position: fixed;
    top: 20px;
    left: 20px;
    right: 20px;
    z-index: 1000;
    height: 60px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px 24px;
    background-color: #26212c;
    border-radius: 12px;
  }

  .navbar__logo {
    gap: 16px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .navbar__logo a {
    gap: 12px;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .navbar__links a, .navbar__links__mobile a {
    font-weight: 300;
    color: #d9d3de;
    font-size: 0.9rem;
  }

  .navbar__links {
    display: flex;
    gap: 36px;
  }

  a {
    text-decoration: none;
  }

  .navbar__logo__author {
    font-family: "Nothing You Could Do", serif;
    color: var(--copy);
    font-size: 1.3rem;
    text-decoration: none;
  }

  .navbar__language__input {
    border: 2px solid var(--border);
    border-radius: 16px;
    height: 100%;
  }

  select {
    border-radius: 16px;
    font-size: 0.9rem;
    height: 100%;
    border: none;
    border-right: 12px solid transparent;
    color: #a598b3;
    padding: 6px 54px 6px 12px;
    padding-right: 48px;
    background-color: var(--background);
  }

  select:focus {
    outline: 2px solid rgb(108, 108, 228);
  }

  @media (max-width: 880px) {
    .navbar__links, #navbar__logo__link {
      display: none;
    }

    #navbar__three__bars {
      display: block;
    }

    .navbar {
      flex-wrap: wrap;
    }
  }
</style>

<script define:vars={{locale}}>
  const menuButton = document.getElementById('navbar__three__bars');
  const mobileMenu = document.querySelector('.navbar__links__mobile');
  const languageSelect = document.getElementById('language-select');

  if (menuButton && mobileMenu) {
    menuButton.addEventListener('click', () => {
      mobileMenu.classList.toggle('active');
    });

    // Close menu when clicking outside
    document.addEventListener('click', (event) => {
      const isClickInsideMenu = mobileMenu.contains(event.target);
      const isClickOnButton = menuButton.contains(event.target);
      
      if (!isClickInsideMenu && !isClickOnButton && mobileMenu.classList.contains('active')) {
        mobileMenu.classList.remove('active');
      }
    });
  }
  if (languageSelect) {
    languageSelect.addEventListener('change', (event) => {
      const selectedLocale = event.target?.value;
      const currentPath = location.pathname.split('/').slice(2).join('/');
      const newPath = `/${selectedLocale}/${currentPath}`;
      window.location.href = newPath;
    });
  }
</script>