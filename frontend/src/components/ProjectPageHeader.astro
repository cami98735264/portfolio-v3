---
interface Technology {
  name: string;
  backgroundColor: string;
  textColor: string;
}

import TechnologyLabel from "./TechnologyLabel.astro";
import GithubIcon from "../assets/icons/github.svg?url";
import Globe from "../assets/icons/globe.svg?url";
let { projectInfo } = Astro.props;
let { backgroundUrl, technologies, viewGithub, viewOnline, githubUrl, onlineUrl } = projectInfo;
---

<div class="project-page-header">
  <div
    class="project-background-image"
    style={`background: url(${backgroundUrl}) #fff no-repeat center center / contain; border: 1px solid var(--border);`}
  >
  </div>
  <div class="project-header-content-container">
    <div class="project-header-content">
      <div class="project-header-content-inner">
        <h1>{projectInfo.title}</h1>
        <div class="project-header-technologies">
          {technologies.map((technology: Technology) => (
            <TechnologyLabel
              name={technology.name}
              backgroundColor={technology.backgroundColor}
              textColor={technology.textColor}
            />
          ))}
        </div>
      </div>
      <div class="project-header-content-description">
        <p>
          {projectInfo.description}
        </p>
        <div class="project-header-buttons">
          {onlineUrl && <a href={onlineUrl} class="button" target="_blank" id="viewOnlineButton">
            <img src={Globe} alt="Globe" /> <span>{viewOnline}</span>
          </a>}
          {githubUrl?.frontend && (githubUrl.frontend !== githubUrl.backend) && <a href={githubUrl?.frontend} target="_blank" id="githubButton" class="button">
            <img src={GithubIcon} alt="Github" /> <span>{viewGithub} (frontend)</span>
          </a>}
          {githubUrl?.backend && (githubUrl.frontend !== githubUrl.backend) && <a href={githubUrl?.frontend} target="_blank" id="githubButton" class="button">
            <img src={GithubIcon} alt="Github" /> <span>{viewGithub} (backend)</span>
          </a>}
          {githubUrl?.backend && githubUrl?.frontend && (githubUrl.backend === githubUrl.frontend) && <a href={githubUrl?.frontend} target="_blank" id="githubButton" class="button">
            <img src={GithubIcon} alt="Github" /> <span>{viewGithub} (backend & frontend)</span>
          </a>}
        </div>
      </div>
    </div>
  </div>
</div>

<style>
h1 {
    max-height: 100px;
    overflow-y: auto;
    line-height: 1.1;
    font-size: var(--font-size-title);
}

/* style the scrollbar */
h1::-webkit-scrollbar {
    width: 8px;
    display: none;
}

h1:hover::-webkit-scrollbar {
    display: block;
}

h1::-webkit-scrollbar-thumb {
    background-color: var(--border);
    border-radius: 4px;
}

h1::-webkit-scrollbar-track {
    background-color: var(--foreground);
}



  .project-page-header {
    height: calc(100dvh - 128px);
    display: flex;
    width: 100%;
    flex-direction: column;
    gap: 12px;
  }
  .project-background-image {
    border-radius: 12px;
    padding: 20px;
    border: 1px solid var(--border);
    flex: 1;
  }
  .project-header-content-container {
    border: 1px solid var(--border);
    display: flex;
    border-radius: 12px;
    background-color: var(--foreground);
  }
  .project-header-content-inner {
    display: flex;
    flex-direction: column;
    gap: 24px;
    flex: 1;
  }
  .project-header-buttons {
    flex-wrap: wrap;
    display: flex;
    gap: 8px;
  }
  .project-header-buttons a {
    display: flex;
    gap: 12px;
    align-items: center;
    padding: 8px 16px;
    border-radius: 8px;
    background-color: var(--foreground);
    border: 1px solid var(--border);
    color: var(--copy);
    font-size: var(--font-size-description);
    transition: background-color 0.2s;
  }
  .project-header-buttons a:hover {
    background-color: var(--background);
  }
  .project-header-buttons a img {
    width: 24px;
    height: 24px;
  }
  .project-header-buttons a span {
    font-size: var(--font-size-description);
    color: var(--copy);
  }
  .project-header-content-description {
    display: flex;
    flex-direction: column;
    gap: 16px;
    flex: 1;
  }

  .project-header-content-description p {
    max-height: 120px;
    overflow: auto;
    font-size: var(--font-size-description);
    color: var(--copy-light);
  }

  .project-header-content-description p::-webkit-scrollbar {
    width: 8px;
  }

  .project-header-content-description p::-webkit-scrollbar-thumb {
    background-color: var(--border);
    border-radius: 4px;
  }

  .project-header-content-description p::-webkit-scrollbar-track {
    background-color: var(--foreground);
  }

  .project-header-content-description p::-webkit-scrollbar-thumb:hover {
    background-color: var(--border);
  }

  .project-header-content-description p::-webkit-scrollbar-thumb:active {
    background-color: var(--border);
  }

  .project-header-content-description p::-webkit-scrollbar-track:hover {
    background-color: var(--foreground);
  }

  .project-header-content-description p::-webkit-scrollbar-track:active {
    background-color: var(--foreground);
  }

  .project-header-content-description p::-webkit-scrollbar-button {
    display: none;
  }

  .project-header-content-description p::-webkit-scrollbar-corner {
    display: none;
  }

  .project-header-content-description p::-webkit-resizer {
    display: none;
  }


  .project-header-content {
    padding: 60px;
    display: flex;
    align-items: flex-start;
    gap: 48px;
  }

  .project-header-technologies {
    flex-wrap: wrap;
    display: flex;
    gap: 10px;
  }

  @media (max-width: 990px), (max-height: 660px) {
    .project-header-buttons {
      gap: 4px;
    }
    .project-page-header {
      height: auto;
    }
    h1 {
      line-height: 1.3;
    }
    .project-header-content {
      flex-direction: column;
      gap: 16px;
      padding: 30px;
    }

    .project-header-technologies {
      gap: 8px;
    }

    .project-header-content-inner {
      gap: 12px;
    }

    .project-header-content-container {
      flex: 0;
      order: -1;
    }
    .project-background-image {
      flex: 0 350px;
    }
  }
</style>
